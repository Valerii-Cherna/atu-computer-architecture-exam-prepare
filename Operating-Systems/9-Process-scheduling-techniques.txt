9) Process scheduling techniques
  - first come first served;
  - Round Robin;


-----------------------------------
First Come First Serve(FCFS) Scheduling:
  - is the simplest scheduling algorithm;
  - schedule the first process to arrive and let it run to completion;
  - is a non-preemptive scheduling algorithm, which means that only a single process can run at a time;

Example:

    Process  |  Arrival Time  |  Execute Time  |  Service Time
  ------------------------------------------------------------
    P0       |  0             |  5             |
    P1       |  1             |  3             |
    P2       |  2             |  8             |
    P3       |  3             |  6             |

  1) Run P0:
    - execute 5ms;
    - Service Time = 0;

        P0
    |----------|   
    |          |
    0          5 

    - P0 done;

  2) Run P1:
    - execute 3ms;
    - Service Time = 5;  
  
        P0        P1
    |----------|------|   
    |          |      |
    0          5      8

    - P1 done;

  2) Run P2:
    - execute 8ms;
    - Service Time = 8;  
  
        P0        P1         P2
    |----------|------|----------------|   
    |          |      |                |
    0          5      8                16

    - P2 done;

  3) Run P3:
    - execute 6ms;
    - Service Time = 16;  
  
        P0        P1         P2
    |----------|------|----------------|------------|   
    |          |      |                |            |
    0          5      8                16           22

    - P3 done;

  4) Calculate Wait Time;
    Wait Time = Service Time - Arrival Time;

    Wait Time P0: 0 - 0 = 0;
    Wait Time P1: 5 - 1 = 4;
    Wait Time P2: 8 - 2 = 6;
    Wait Time P3: 16 - 3 = 13;

  5) Calculate Average Wait Time:
    Average Wait Time = Sum of Wait Time each process / Number of processes 

    Average Wait Time: (0 + 4 + 6 + 13) / 4 = 5.55

  6) Total table

      Process  |  Arrival Time  |  Execute Time  |  Service Time
    ------------------------------------------------------------
      P0       |  0             |  5             |  0
      P1       |  1             |  3             |  5
      P2       |  2             |  8             |  8
      P3       |  3             |  6             |  16
  

-----------------------------------
Round Robin
  - is generally used time slices(time quanta) are assigned to each process in equal portions;
  - and in circular order, handing all processes without priority;

Example:
  
  Quantun/Time Slices/Time Quanta = 3

    Process  |  Arrival Time  |  Execute Time   
  ----------------------------------------------
    P0       |  0             |  5             
    P1       |  1             |  3             
    P2       |  2             |  8             
    P3       |  3             |  6             

  1) Run P0:

    Request queue: P0

      P0
    |------|   
    |      |
    0      3

    P0 - left 2 ms;  

    Request queue: P1, P2, P3, P0  

  2) Run P1:

    Request queue: P1, P2, P3, P0

      P0      P1
    |------|------|   
    |      |      |
    0      3      6

    P1 - done;  

    Request queue: P2, P3, P0  

  3) Run P2:

    Request queue: P2, P3, P0

      P0      P1     P2
    |------|------|------|   
    |      |      |      |
    0      3      6      9

    P2 - left 5 ms;  

    Request queue: P3, P0, P2      

  4) Run P3:

    Request queue: P3, P0, P2 

      P0      P1     P2     P3
    |------|------|------|------|   
    |      |      |      |      |
    0      3      6      9      12

    P3 - left 3 ms;  

    Request queue: P0, P2, P3     

  5) Run P0:

    Request queue: P0, P2, P3 

      P0      P1     P2     P3     P0
    |------|------|------|------|------|   
    |      |      |      |      |      |
    0      3      6      9      12     15

    P0 - done;  

    Request queue: P2, P3     

  6) Run P2:

    Request queue: P2, P3

      P0      P1     P2     P3     P0     P2
    |------|------|------|------|------|------|   
    |      |      |      |      |      |      |
    0      3      6      9      12     15     18

    P2 - left 2 ms;  

    Request queue: P3, P2  

  7) Run P3:

    Request queue: P3, P2

      P0      P1     P2     P3     P0     P2     P3
    |------|------|------|------|------|------|------|   
    |      |      |      |      |      |      |      |
    0      3      6      9      12     15     18     22

    P3 - done;  

    Request queue: P2 

  8) Run P2:

    Request queue: P2

      P0      P1     P2     P3     P0     P2     P3     P2
    |------|------|------|------|------|------|------|------|   
    |      |      |      |      |      |      |      |      |
    0      3      6      9      12     15     18     21     24

    P2 - done;  

  9) Calculate Wait Time;
    Wait Time = (Service Time - Arrival Time) + (Service Time - Prev Finish Time) + ...;

    Wait Time P0: (0 - 0) + (12 - 3) = 9;
    Wait Time P1: (3 - 1) = 2;
    Wait Time P2: (6 - 2) + (15 - 9) + (21 - 18) = 13;
    Wait Time P3: (9 - 3) + (18 - 12) = 12;

  10) Calculate Average Wait Time:
    Average Wait Time = Sum of Wait Time each process / Number of processes 

    Average Wait Time: (9 + 2 + 13 + 12) / 4 = 9
      